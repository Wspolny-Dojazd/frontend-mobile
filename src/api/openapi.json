{
  "openapi": "3.0.4",
  "info": {
    "title": "Transport API",
    "version": "v1"
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticates a user using provided credentials and returns a JWT token.",
        "requestBody": {
          "description": "The login request containing email and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been authenticated successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Registers a new user and returns a JWT token.",
        "requestBody": {
          "description": "The registration request containing email, nickname, and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been registered successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The email address is already in use.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": ["Auth"],
        "summary": "Retrieves the currently authenticated user's profile.",
        "responses": {
          "200": {
            "description": "The user profile has been retrieved successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "The authenticated user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Changes the password of the currently authenticated user.",
        "requestBody": {
          "description": "The change-password request containing current and new password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user password has been changed successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The authenticated user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-nickname": {
      "post": {
        "tags": ["Auth"],
        "summary": "Changes the nickname of the currently authenticated user.",
        "requestBody": {
          "description": "The request containing the new nickname.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeNicknameRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeNicknameRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeNicknameRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user nickname has been changed successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The authenticated user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refreshes the access token using the provided refresh token.",
        "requestBody": {
          "description": "The request containing token and refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token has been refreshed successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/friend-invitations": {
      "post": {
        "tags": ["FriendInvitations"],
        "summary": "Sends a new friend invitation from the authenticated user to another user.",
        "requestBody": {
          "description": "The friend invitation request data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FriendInvitationRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FriendInvitationRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FriendInvitationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Friend invitation sent successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationDto"
                }
              }
            }
          },
          "400": {
            "description": "Self-invitation, already sent, already friends, or reciprocal invitation exists.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The recipient user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/friend-invitations/sent": {
      "get": {
        "tags": ["FriendInvitations"],
        "summary": "Retrieves all invitations sent by the authenticated user.",
        "responses": {
          "200": {
            "description": "The sent invitations were retrieved successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendInvitationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendInvitationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendInvitationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/friend-invitations/received": {
      "get": {
        "tags": ["FriendInvitations"],
        "summary": "Retrieves all invitations received by the authenticated user.",
        "responses": {
          "200": {
            "description": "The received invitations were retrieved successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendInvitationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendInvitationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendInvitationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/friend-invitations/{id}/accept": {
      "post": {
        "tags": ["FriendInvitations"],
        "summary": "Accepts a friend invitation and creates a friendship between the sender and receiver.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the invitation to accept.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Friend invitation accepted successfully."
          },
          "403": {
            "description": "The user is not authorized to accept the invitation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The invitation was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/friend-invitations/{id}": {
      "delete": {
        "tags": ["FriendInvitations"],
        "summary": "Deletes a friend invitation.",
        "description": "This method executes a `cancel` operation if the user is the sender,\nor a `decline` operation if the user is the receiver.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the invitation to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Friend invitation deleted successfully."
          },
          "403": {
            "description": "The user is not authorized to delete the invitation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The invitation was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/friends": {
      "get": {
        "tags": ["Friends"],
        "summary": "Retrieves a friend list for currently logged in user.",
        "responses": {
          "200": {
            "description": "The friend list was successfully retrieved.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "The friend list was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/invitations": {
      "post": {
        "tags": ["GroupInvitations"],
        "summary": "Sends a new group invitation from the authenticated user to another user.",
        "requestBody": {
          "description": "The group invitation request data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupInvitationRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupInvitationRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupInvitationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group invitation sent successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationDto"
                }
              }
            }
          },
          "400": {
            "description": "Self-invitation, already sent, already in group, or reciprocal invitation exists.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The recipient user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/invitations": {
      "get": {
        "tags": ["GroupInvitations"],
        "summary": "Retrieves all invitations that were sent from the specific group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sent invitations were retrieved successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/invitations/received": {
      "get": {
        "tags": ["GroupInvitations"],
        "summary": "Retrieves all invitations received by the authenticated user.",
        "responses": {
          "200": {
            "description": "The received invitations were retrieved successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/invitations/{id}/accept": {
      "post": {
        "tags": ["GroupInvitations"],
        "summary": "Accepts a group invitation between the sender and receiver.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the invitation to accept.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group invitation accepted successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "The user is already in the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The user is not authorized to accept the invitation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The invitation was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/invitations/{id}": {
      "delete": {
        "tags": ["GroupInvitations"],
        "summary": "Deletes a group invitation.",
        "description": "This method executes a `cancel` operation if the user is the sender,\nor a `decline` operation if the user is the receiver.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the invitation to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group invitation deleted successfully."
          },
          "403": {
            "description": "The user is not authorized to delete the invitation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The invitation was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/paths": {
      "post": {
        "tags": ["GroupPaths"],
        "summary": "Generates multiple proposed path sets for all users in the group\nbased on their locations and a desired destination.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing destination and user locations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PathRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PathRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PathRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The paths were successfully generated.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposedPathDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposedPathDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposedPathDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot generate paths because one has already been accepted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The user is not the owner of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["GroupPaths"],
        "summary": "Retrieves all proposed paths for the specified group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paths were successfully retrieved.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposedPathDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposedPathDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposedPathDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot retrieve paths because one has already been accepted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/paths/accepted": {
      "get": {
        "tags": ["GroupPaths"],
        "summary": "Retrieves the accepted path for the specified group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The accepted path was successfully retrieved.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposedPathDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposedPathDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposedPathDto"
                }
              }
            }
          },
          "403": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group or the path was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/paths/{pathId}/accept": {
      "post": {
        "tags": ["GroupPaths"],
        "summary": "Accepts a proposed path and removes all other proposed paths for the group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pathId",
            "in": "path",
            "description": "The identifier of the path to accept.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The path was successfully accepted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposedPathDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposedPathDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposedPathDto"
                }
              }
            }
          },
          "400": {
            "description": "The path is already accepted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The user is not the owner of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPathErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieves a group by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group was successfully retrieved.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups": {
      "post": {
        "tags": ["Groups"],
        "summary": "Creates a new group.",
        "responses": {
          "200": {
            "description": "The group was successfully created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieves all groups that the currently logged user is a member of.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's groups.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/join/code/{code}": {
      "post": {
        "tags": ["Groups"],
        "summary": "Adds the currently authenticated user to a group using a joining code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The unique joining code of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully added to the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "The group or the user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/leave": {
      "post": {
        "tags": ["Groups"],
        "summary": "Removes the currently authenticated user from the specified group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was successfully removed from the group."
          },
          "403": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group or the user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/kick/{userId}": {
      "post": {
        "tags": ["Groups"],
        "summary": "Removes a specific user from a group (kick user).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully removed from the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The user is not a member of the group.\nThe user is the creator of the group and cannot be kicked from it.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group or the user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/messages": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieves all messages for a specified group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The messages for the group was successfully retrieved.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group or the user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Sends a message to a specified group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The request payload that contains the message content.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagePayloadDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagePayloadDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessagePayloadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was successfully sent.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          },
          "400": {
            "description": "The message was empty.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageErrorCodeErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group or the user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/members": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieves all members of the specified group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the members of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user-configuration": {
      "get": {
        "tags": ["UserConfiguration"],
        "summary": "Retrieves a user configuration.",
        "responses": {
          "200": {
            "description": "The user configuration was found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              }
            }
          },
          "404": {
            "description": "The user configuration was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["UserConfiguration"],
        "summary": "Updates user configuration.",
        "requestBody": {
          "description": "The user configuration fields to update with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigurationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigurationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user configuration was updated successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              }
            }
          },
          "400": {
            "description": "The user configuration data had invalid format.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieves a user by their unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me/location": {
      "post": {
        "tags": ["Users"],
        "summary": "Updates the current user's location.",
        "requestBody": {
          "description": "The location data containing latitude and longitude.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserLocationRequestDto"
                  },
                  {
                    "$ref": "#/components/schemas/MemberLocationRequestDto"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserLocationRequestDto"
                  },
                  {
                    "$ref": "#/components/schemas/MemberLocationRequestDto"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserLocationRequestDto"
                  },
                  {
                    "$ref": "#/components/schemas/MemberLocationRequestDto"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The location was updated successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocationDto"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLocationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/search": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieves users whose username or nickname closely matches the provided query.",
        "description": "Users are matched using the Levenshtein distance.\nThe comparison is case-insensitive.\nResults are ordered first by the distance to the username,\nthen by the distance to the nickname.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The search string to compare against usernames and nicknames.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users matching the query were found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthErrorCode": {
        "enum": [
          "MISSING_TOKEN",
          "INVALID_TOKEN",
          "INVALID_REFRESH_TOKEN",
          "EXPIRED_TOKEN",
          "USER_NOT_FOUND",
          "INVALID_CURRENT_PASSWORD",
          "INVALID_NICKNAME"
        ],
        "type": "string"
      },
      "AuthErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/AuthErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthResponseDto": {
        "required": ["email", "id", "nickname", "refreshToken", "token", "username"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "token": {
            "minLength": 1,
            "type": "string"
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChangeNicknameRequestDto": {
        "required": ["newNickname"],
        "type": "object",
        "properties": {
          "newNickname": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequestDto": {
        "required": ["currentPassword", "newPassword"],
        "type": "object",
        "properties": {
          "currentPassword": {
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DistanceUnit": {
        "enum": ["Kilometers", "Miles"],
        "type": "string"
      },
      "FriendInvitationDto": {
        "required": ["createdAt", "id", "receiver", "sender"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sender": {
            "$ref": "#/components/schemas/UserDto"
          },
          "receiver": {
            "$ref": "#/components/schemas/UserDto"
          }
        },
        "additionalProperties": false
      },
      "FriendInvitationErrorCode": {
        "enum": [
          "INVITATION_NOT_FOUND",
          "RECIPIENT_NOT_FOUND",
          "ALREADY_FRIEND",
          "ALREADY_SENT",
          "RECIPROCAL_EXISTS",
          "SELF_INVITATION",
          "ACCESS_DENIED"
        ],
        "type": "string"
      },
      "FriendInvitationErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/FriendInvitationErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FriendInvitationRequestDto": {
        "required": ["userId"],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GroupDto": {
        "required": ["groupMembers", "id", "joiningCode"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "joiningCode": {
            "minLength": 1,
            "type": "string"
          },
          "groupMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMemberDto"
            }
          }
        },
        "additionalProperties": false
      },
      "GroupErrorCode": {
        "enum": [
          "GROUP_NOT_FOUND",
          "USER_NOT_FOUND",
          "USER_ALREADY_IN_GROUP",
          "USER_NOT_IN_GROUP",
          "ACCESS_DENIED"
        ],
        "type": "string"
      },
      "GroupErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GroupErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupInvitationDto": {
        "required": ["createdAt", "group", "id", "receiver", "sender"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sender": {
            "$ref": "#/components/schemas/UserDto"
          },
          "receiver": {
            "$ref": "#/components/schemas/UserDto"
          },
          "group": {
            "$ref": "#/components/schemas/GroupDto"
          }
        },
        "additionalProperties": false
      },
      "GroupInvitationErrorCode": {
        "enum": [
          "INVITATION_NOT_FOUND",
          "GROUP_NOT_FOUND",
          "RECIPIENT_NOT_FOUND",
          "ALREADY_IN_GROUP",
          "ALREADY_SENT",
          "RECIPROCAL_EXISTS",
          "SELF_INVITATION",
          "ACCESS_DENIED"
        ],
        "type": "string"
      },
      "GroupInvitationErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GroupInvitationErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupInvitationRequestDto": {
        "required": ["groupId", "userId"],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GroupMemberDto": {
        "required": ["id", "isCreator", "nickname", "username"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/UserLocationDto"
          },
          "isCreator": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GroupPathErrorCode": {
        "enum": [
          "GROUP_NOT_FOUND",
          "PATH_NOT_FOUND",
          "PATH_NOT_IN_GROUP",
          "PATH_ALREADY_ACCEPTED",
          "ACCESS_DENIED"
        ],
        "type": "string"
      },
      "GroupPathErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GroupPathErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InternalErrorCode": {
        "enum": ["INTERNAL_ERROR"],
        "type": "string"
      },
      "InternalErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/InternalErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Language": {
        "enum": ["Polish", "English"],
        "type": "string"
      },
      "LoginErrorCode": {
        "enum": ["INVALID_CREDENTIALS", "INVALID_EMAIL_FORMAT", "VALIDATION_ERROR"],
        "type": "string"
      },
      "LoginErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/LoginErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginRequestDto": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MemberLocationRequestDto": {
        "required": ["userId"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserLocationRequestDto"
          }
        ],
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "MessageDto": {
        "required": ["content", "createdAt", "id", "userId"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MessageErrorCode": {
        "enum": ["EMPTY_MESSAGE"],
        "type": "string"
      },
      "MessageErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/MessageErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessagePayloadDto": {
        "required": ["content"],
        "type": "object",
        "properties": {
          "content": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PathRequestDto": {
        "required": ["arrivalTime", "destinationLatitude", "destinationLongitude", "userLocations"],
        "type": "object",
        "properties": {
          "destinationLatitude": {
            "type": "number",
            "format": "double"
          },
          "destinationLongitude": {
            "type": "number",
            "format": "double"
          },
          "arrivalTime": {
            "type": "string",
            "format": "date-time"
          },
          "userLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberLocationRequestDto"
            }
          }
        },
        "additionalProperties": false
      },
      "ProposedPathDto": {
        "required": ["id", "paths"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "paths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPathDto"
            }
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenRequestDto": {
        "required": ["refreshToken", "token"],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string"
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterErrorCode": {
        "enum": [
          "EMAIL_ALREADY_USED",
          "USERNAME_ALREADY_USED",
          "USERNAME_VALIDATION_ERROR",
          "INVALID_EMAIL_FORMAT",
          "VALIDATION_ERROR",
          "USERNAME_RESERVED"
        ],
        "type": "string"
      },
      "RegisterErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/RegisterErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequestDto": {
        "required": ["email", "nickname", "password", "username"],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 32,
            "minLength": 3,
            "pattern": "^[a-z0-9_]+$",
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RouteLineDto": {
        "required": ["color", "headSign", "longName", "shortName", "textColor", "type"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RouteType"
          },
          "shortName": {
            "minLength": 1,
            "type": "string"
          },
          "longName": {
            "minLength": 1,
            "type": "string"
          },
          "headSign": {
            "minLength": 1,
            "type": "string"
          },
          "color": {
            "minLength": 1,
            "type": "string"
          },
          "textColor": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RouteSegmentDto": {
        "required": ["line", "shapes", "stops"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SegmentDtoBase"
          }
        ],
        "properties": {
          "line": {
            "$ref": "#/components/schemas/RouteLineDto"
          },
          "stops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StopDto"
            }
          },
          "shapes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapeSectionDto"
            }
          }
        },
        "additionalProperties": false
      },
      "RouteType": {
        "enum": [
          "Tram",
          "Metro",
          "Rail",
          "Bus",
          "Ferry",
          "CableCar",
          "AerialLift",
          "Funicular",
          "Trolleybus",
          "Monorail"
        ],
        "type": "string"
      },
      "SegmentDtoBase": {
        "type": "object",
        "additionalProperties": false
      },
      "ShapeCoordDto": {
        "required": ["latitude", "longitude"],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ShapeSectionDto": {
        "required": ["coords"],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "coords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapeCoordDto"
            }
          }
        },
        "additionalProperties": false
      },
      "StopDto": {
        "required": ["code", "id", "latitude", "longitude", "name", "wheelchairAccessible"],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "wheelchairAccessible": {
            "type": "boolean"
          },
          "arrivalTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "departureTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Theme": {
        "enum": ["Dark", "Light", "System"],
        "type": "string"
      },
      "TimeSystem": {
        "enum": ["TwelveHour", "TwentyFourHour"],
        "type": "string"
      },
      "UserConfigurationDto": {
        "required": ["distanceUnit", "language", "theme", "timeSystem"],
        "type": "object",
        "properties": {
          "timeSystem": {
            "$ref": "#/components/schemas/TimeSystem"
          },
          "distanceUnit": {
            "$ref": "#/components/schemas/DistanceUnit"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          }
        },
        "additionalProperties": false
      },
      "UserConfigurationErrorCode": {
        "enum": ["USER_CONFIGURATION_NOT_FOUND", "VALIDATION_ERROR"],
        "type": "string"
      },
      "UserConfigurationErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UserConfigurationErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "required": ["email", "id", "nickname", "username"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserErrorCode": {
        "enum": ["USER_NOT_FOUND"],
        "type": "string"
      },
      "UserErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UserErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLocationDto": {
        "required": ["latitude", "longitude", "updatedAt"],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserLocationErrorCode": {
        "enum": ["INVALID_COORDINATES", "LOCATION_NOT_FOUND"],
        "type": "string"
      },
      "UserLocationErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UserLocationErrorCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLocationRequestDto": {
        "required": ["latitude", "longitude"],
        "type": "object",
        "properties": {
          "latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UserPathDto": {
        "required": ["departureTime", "segments", "userId"],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "departureTime": {
            "type": "string",
            "format": "date-time"
          },
          "segments": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RouteSegmentDto"
                },
                {
                  "$ref": "#/components/schemas/WalkSegmentDto"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "WalkLocationDto": {
        "required": ["id", "latitude", "longitude"],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WalkSegmentDto": {
        "required": ["distance", "duration", "from", "shapes", "to"],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SegmentDtoBase"
          }
        ],
        "properties": {
          "from": {
            "$ref": "#/components/schemas/WalkLocationDto"
          },
          "to": {
            "$ref": "#/components/schemas/WalkLocationDto"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "distance": {
            "type": "integer",
            "format": "int32"
          },
          "shapes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapeSectionDto"
            }
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Your Bearer token (without 'Bearer' prefix)",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Provides authentication endpoints for user login, registration, and profile."
    },
    {
      "name": "FriendInvitations",
      "description": "Provides API endpoints for managing friend invitations."
    },
    {
      "name": "Friends",
      "description": "Provides API endpoints for managing users' friendship relationships."
    },
    {
      "name": "GroupInvitations",
      "description": "Provides API endpoints for managing group invitations."
    },
    {
      "name": "GroupPaths",
      "description": "Provides API endpoints for managing proposed paths within groups."
    },
    {
      "name": "Groups",
      "description": "Provides API endpoints for managing groups and user membership within groups."
    },
    {
      "name": "UserConfiguration",
      "description": "Provides API endpoints for managing and retrieving data related to a user configuration."
    },
    {
      "name": "Users",
      "description": "Provides API endpoints for managing and retrieving user-related data."
    }
  ]
}
