{
  "openapi": "3.0.1",
  "info": {
    "title": "Transport API",
    "version": "v1"
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticates a user using provided credentials and returns a JWT token.",
        "requestBody": {
          "description": "The login request containing email and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been authenticated successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Registers a new user and returns a JWT token.",
        "requestBody": {
          "description": "The registration request containing email, nickname, and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been registered successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The request payload is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "The email address is already in use.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": ["Auth"],
        "summary": "Retrieves the currently authenticated user's profile and JWT token.",
        "responses": {
          "200": {
            "description": "The user profile has been retrieved successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "The authenticated user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieves a group by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group was successfully retrieved.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups": {
      "post": {
        "tags": ["Groups"],
        "summary": "Creates a new group.",
        "responses": {
          "200": {
            "description": "The group was successfully created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieves all groups that the currently logged user is a member of.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's groups.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/join/code/{code}": {
      "post": {
        "tags": ["Groups"],
        "summary": "Adds the currently authenticated user to a group using a joining code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The unique joining code of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully added to the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/leave": {
      "post": {
        "tags": ["Groups"],
        "summary": "Removes the currently authenticated user from the specified group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully removed from the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/kick/{userId}": {
      "post": {
        "tags": ["Groups"],
        "summary": "Removes a specific user from a group (kick user).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully removed from the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "The user is not a member of the group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The group was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user-configuration": {
      "get": {
        "tags": ["UserConfiguration"],
        "summary": "Retrieves a user configuration.",
        "responses": {
          "200": {
            "description": "The user configuration was found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              }
            }
          },
          "404": {
            "description": "The user configuration was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["UserConfiguration"],
        "summary": "Updates user configuration.",
        "requestBody": {
          "description": "The user configuration fields to update with.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigurationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigurationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user configuration was updated successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationDto"
                }
              }
            }
          },
          "400": {
            "description": "The user configuration data had invalid format.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserConfigurationErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieves a user by their unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorCodeErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorCodeErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorCodeErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthErrorCode": {
        "enum": ["MISSING_TOKEN", "INVALID_TOKEN", "EXPIRED_TOKEN"],
        "type": "string",
        "description": "Defines error codes related to authentication operations, returned in API error responses."
      },
      "AuthErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/AuthErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      },
      "AuthResponseDto": {
        "required": ["email", "id", "nickname", "token"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "token": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DistanceUnit": {
        "enum": ["Kilometers", "Miles"],
        "type": "string"
      },
      "GroupDto": {
        "required": ["id", "joiningCode"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "joiningCode": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GroupErrorCode": {
        "enum": ["GROUP_NOT_FOUND", "USER_NOT_FOUND", "USER_ALREADY_IN_GROUP", "USER_NOT_IN_GROUP"],
        "type": "string",
        "description": "Defines error codes related to group operations, returned in API error responses."
      },
      "GroupErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/GroupErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      },
      "InternalErrorCode": {
        "enum": ["INTERNAL_ERROR"],
        "type": "string",
        "description": "Defines error codes related to internal errors."
      },
      "InternalErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/InternalErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      },
      "Language": {
        "enum": ["Polish", "English"],
        "type": "string"
      },
      "LoginErrorCode": {
        "enum": ["INVALID_CREDENTIALS", "INVALID_EMAIL_FORMAT", "VALIDATION_ERROR"],
        "type": "string",
        "description": "Defines error codes returned by the login endpoint."
      },
      "LoginErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/LoginErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      },
      "LoginRequestDto": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterErrorCode": {
        "enum": ["EMAIL_ALREADY_USED", "INVALID_EMAIL_FORMAT", "VALIDATION_ERROR"],
        "type": "string",
        "description": "Defines error codes returned by the registration endpoint."
      },
      "RegisterErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/RegisterErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      },
      "RegisterRequestDto": {
        "required": ["email", "nickname", "password"],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Theme": {
        "enum": ["Dark", "Light"],
        "type": "string"
      },
      "TimeSystem": {
        "enum": ["TwelveHour", "TwentyFourHour"],
        "type": "string"
      },
      "UserConfigurationDto": {
        "required": ["distanceUnit", "language", "theme", "timeSystem"],
        "type": "object",
        "properties": {
          "timeSystem": {
            "$ref": "#/components/schemas/TimeSystem"
          },
          "distanceUnit": {
            "$ref": "#/components/schemas/DistanceUnit"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          }
        },
        "additionalProperties": false
      },
      "UserConfigurationErrorCode": {
        "enum": ["USER_CONFIGURATION_NOT_FOUND", "VALIDATION_ERROR"],
        "type": "string",
        "description": "Defines error codes related to user configuration operations, returned in API error responses."
      },
      "UserConfigurationErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UserConfigurationErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      },
      "UserDto": {
        "required": ["email", "id", "nickname"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "nickname": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserErrorCode": {
        "enum": ["USER_NOT_FOUND"],
        "type": "string",
        "description": "Defines error codes related to user operations, returned in API error responses."
      },
      "UserErrorCodeErrorResponse": {
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UserErrorCode"
          },
          "message": {
            "type": "string",
            "description": "The human-readable error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a strongly-typed error response containing a machine-readable error code."
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Your Bearer token (without 'Bearer' prefix)",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Provides authentication endpoints for user login, registration, and profile."
    },
    {
      "name": "Groups",
      "description": "Provides API endpoints for managing groups and user membership within groups."
    },
    {
      "name": "UserConfiguration",
      "description": "Provides API endpoints for managing and retrieving data related to a user configuration."
    },
    {
      "name": "Users",
      "description": "Provides API endpoints for managing and retrieving user-related data."
    }
  ]
}
