/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Authenticates a user using provided credentials and returns a JWT token. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The login request containing email and password. */
      requestBody?: {
        content: {
          'application/json': components['schemas']['LoginRequestDto'];
          'text/json': components['schemas']['LoginRequestDto'];
          'application/*+json': components['schemas']['LoginRequestDto'];
        };
      };
      responses: {
        /** @description The user has been authenticated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthResponseDto'];
            'application/json': components['schemas']['AuthResponseDto'];
            'text/json': components['schemas']['AuthResponseDto'];
          };
        };
        /** @description The request payload is invalid. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['LoginErrorCodeErrorResponse'];
            'application/json': components['schemas']['LoginErrorCodeErrorResponse'];
            'text/json': components['schemas']['LoginErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Registers a new user and returns a JWT token. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The registration request containing email, nickname, and password. */
      requestBody?: {
        content: {
          'application/json': components['schemas']['RegisterRequestDto'];
          'text/json': components['schemas']['RegisterRequestDto'];
          'application/*+json': components['schemas']['RegisterRequestDto'];
        };
      };
      responses: {
        /** @description The user has been registered successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthResponseDto'];
            'application/json': components['schemas']['AuthResponseDto'];
            'text/json': components['schemas']['AuthResponseDto'];
          };
        };
        /** @description The request payload is invalid. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RegisterErrorCodeErrorResponse'];
            'application/json': components['schemas']['RegisterErrorCodeErrorResponse'];
            'text/json': components['schemas']['RegisterErrorCodeErrorResponse'];
          };
        };
        /** @description The email address is already in use. */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RegisterErrorCodeErrorResponse'];
            'application/json': components['schemas']['RegisterErrorCodeErrorResponse'];
            'text/json': components['schemas']['RegisterErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves the currently authenticated user's profile and JWT token. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user profile has been retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthResponseDto'];
            'application/json': components['schemas']['AuthResponseDto'];
            'text/json': components['schemas']['AuthResponseDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The authenticated user was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserErrorCodeErrorResponse'];
            'application/json': components['schemas']['UserErrorCodeErrorResponse'];
            'text/json': components['schemas']['UserErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves a group by its unique identifier. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the group. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The group was successfully retrieved. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupDto'];
            'application/json': components['schemas']['GroupDto'];
            'text/json': components['schemas']['GroupDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The group was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves all groups that the currently logged user is a member of. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved the user's groups. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupDto'][];
            'application/json': components['schemas']['GroupDto'][];
            'text/json': components['schemas']['GroupDto'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The user was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserErrorCodeErrorResponse'];
            'application/json': components['schemas']['UserErrorCodeErrorResponse'];
            'text/json': components['schemas']['UserErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    put?: never;
    /** Creates a new group. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The group was successfully created. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupDto'];
            'application/json': components['schemas']['GroupDto'];
            'text/json': components['schemas']['GroupDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups/join/code/{code}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Adds the currently authenticated user to a group using a joining code. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique joining code of the group. */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user was successfully added to the group. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupDto'];
            'application/json': components['schemas']['GroupDto'];
            'text/json': components['schemas']['GroupDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The group was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups/{id}/leave': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Removes the currently authenticated user from the specified group. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the group. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user was successfully removed from the group. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupDto'];
            'application/json': components['schemas']['GroupDto'];
            'text/json': components['schemas']['GroupDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The group was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups/{id}/kick/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Removes a specific user from a group (kick user). */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the group. */
          id: number;
          /** @description The unique identifier of the user to be removed. */
          userId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user was successfully removed from the group. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupDto'];
            'application/json': components['schemas']['GroupDto'];
            'text/json': components['schemas']['GroupDto'];
          };
        };
        /** @description The user is not a member of the group. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The group was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups/{id}/messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves all messages for a specified group. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the group. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The messages for the group was successfully retrieved. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageDto'][];
            'application/json': components['schemas']['MessageDto'][];
            'text/json': components['schemas']['MessageDto'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The user is not a member of the group. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description The group or the user was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    put?: never;
    /** Sends a message to a specified group. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the group. */
          id: number;
        };
        cookie?: never;
      };
      /** @description The request payload that contains the message content. */
      requestBody?: {
        content: {
          'application/json': components['schemas']['MessagePayloadDto'];
          'text/json': components['schemas']['MessagePayloadDto'];
          'application/*+json': components['schemas']['MessagePayloadDto'];
        };
      };
      responses: {
        /** @description The message was successfully sent. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageDto'];
            'application/json': components['schemas']['MessageDto'];
            'text/json': components['schemas']['MessageDto'];
          };
        };
        /** @description The message was empty. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageErrorCodeErrorResponse'];
            'application/json': components['schemas']['MessageErrorCodeErrorResponse'];
            'text/json': components['schemas']['MessageErrorCodeErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The user is not a member of the group. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description The group or the user was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/groups/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves all members of the specified group. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the group. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved the members of the group. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupMemberDto'][];
            'application/json': components['schemas']['GroupMemberDto'][];
            'text/json': components['schemas']['GroupMemberDto'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The group was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupErrorCodeErrorResponse'];
            'application/json': components['schemas']['GroupErrorCodeErrorResponse'];
            'text/json': components['schemas']['GroupErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/routes/shared': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Calculates optimized shared routes for a group of users. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Request containing user locations and a shared destination. */
      requestBody?: {
        content: {
          'application/json': components['schemas']['PathRequestDto'];
          'text/json': components['schemas']['PathRequestDto'];
          'application/*+json': components['schemas']['PathRequestDto'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProposedPathDto'][];
            'application/json': components['schemas']['ProposedPathDto'][];
            'text/json': components['schemas']['ProposedPathDto'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user-configuration': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves a user configuration. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user configuration was found. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserConfigurationDto'];
            'application/json': components['schemas']['UserConfigurationDto'];
            'text/json': components['schemas']['UserConfigurationDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The user configuration was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserConfigurationErrorCodeErrorResponse'];
            'application/json': components['schemas']['UserConfigurationErrorCodeErrorResponse'];
            'text/json': components['schemas']['UserConfigurationErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    /** Updates user configuration. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The user configuration fields to update with. */
      requestBody?: {
        content: {
          'application/json': components['schemas']['UserConfigurationDto'];
          'text/json': components['schemas']['UserConfigurationDto'];
          'application/*+json': components['schemas']['UserConfigurationDto'];
        };
      };
      responses: {
        /** @description The user configuration was updated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserConfigurationDto'];
            'application/json': components['schemas']['UserConfigurationDto'];
            'text/json': components['schemas']['UserConfigurationDto'];
          };
        };
        /** @description The user configuration data had invalid format. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserConfigurationErrorCodeErrorResponse'];
            'application/json': components['schemas']['UserConfigurationErrorCodeErrorResponse'];
            'text/json': components['schemas']['UserConfigurationErrorCodeErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves a user by their unique identifier. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique identifier of the user to retrieve. */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The user was found. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserDto'];
            'application/json': components['schemas']['UserDto'];
            'text/json': components['schemas']['UserDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description The user was not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserErrorCodeErrorResponse'];
            'application/json': components['schemas']['UserErrorCodeErrorResponse'];
            'text/json': components['schemas']['UserErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/me/location': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Updates the current user's location. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The location data containing latitude and longitude. */
      requestBody?: {
        content: {
          'application/json': components['schemas']['UserLocationRequestDto'];
          'text/json': components['schemas']['UserLocationRequestDto'];
          'application/*+json': components['schemas']['UserLocationRequestDto'];
        };
      };
      responses: {
        /** @description The location was updated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserLocationDto'];
            'application/json': components['schemas']['UserLocationDto'];
            'text/json': components['schemas']['UserLocationDto'];
          };
        };
        /** @description The request was invalid. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserLocationErrorCodeErrorResponse'];
            'application/json': components['schemas']['UserLocationErrorCodeErrorResponse'];
            'text/json': components['schemas']['UserLocationErrorCodeErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthErrorCodeErrorResponse'];
            'application/json': components['schemas']['AuthErrorCodeErrorResponse'];
            'text/json': components['schemas']['AuthErrorCodeErrorResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InternalErrorCodeErrorResponse'];
            'application/json': components['schemas']['InternalErrorCodeErrorResponse'];
            'text/json': components['schemas']['InternalErrorCodeErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * @description Defines error codes related to authentication operations, returned in API error responses.
     * @enum {string}
     */
    AuthErrorCode: 'MISSING_TOKEN' | 'INVALID_TOKEN' | 'EXPIRED_TOKEN';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    AuthErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['AuthErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    AuthResponseDto: {
      /** Format: uuid */
      id: string;
      username: string;
      nickname: string;
      email: string;
      token: string;
    };
    BaseSegmentDto: Record<string, never>;
    /** @enum {string} */
    DistanceUnit: 'Kilometers' | 'Miles';
    GroupDto: {
      /** Format: int32 */
      id: number;
      joiningCode: string;
    };
    /**
     * @description Defines error codes related to group operations, returned in API error responses.
     * @enum {string}
     */
    GroupErrorCode:
      | 'GROUP_NOT_FOUND'
      | 'USER_NOT_FOUND'
      | 'USER_ALREADY_IN_GROUP'
      | 'USER_NOT_IN_GROUP'
      | 'ACCESS_DENIED';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    GroupErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['GroupErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    GroupMemberDto: {
      /** Format: uuid */
      id: string;
      username: string;
      nickname: string;
      location?: components['schemas']['UserLocationDto'] | null;
    };
    GroupMemberLocationRequestDto: {
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      /** Format: uuid */
      userId: string;
    };
    /**
     * @description Defines error codes related to internal errors.
     * @enum {string}
     */
    InternalErrorCode: 'INTERNAL_ERROR';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    InternalErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['InternalErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    /** @enum {string} */
    Language: 'Polish' | 'English';
    /**
     * @description Defines error codes returned by the login endpoint.
     * @enum {string}
     */
    LoginErrorCode: 'INVALID_CREDENTIALS' | 'INVALID_EMAIL_FORMAT' | 'VALIDATION_ERROR';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    LoginErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['LoginErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    LoginRequestDto: {
      /** Format: email */
      email: string;
      password: string;
    };
    MessageDto: {
      /** Format: int32 */
      id: number;
      /** Format: uuid */
      userId: string;
      content: string;
      /** Format: date-time */
      createdAt: string;
    };
    /**
     * @description Defines error codes related to message operations, returned in API error responses.
     * @enum {string}
     */
    MessageErrorCode: 'EMPTY_MESSAGE';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    MessageErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['MessageErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    MessagePayloadDto: {
      content: string;
    };
    PathRequestDto: {
      /** Format: double */
      destinationLatitude: number;
      /** Format: double */
      destinationLongitude: number;
      /** Format: date-time */
      arrivalTime: string;
      userLocations: components['schemas']['GroupMemberLocationRequestDto'][];
    };
    ProposedPathDto: {
      pathId: string;
      paths: components['schemas']['UserPathDto'][];
    };
    /**
     * @description Defines error codes returned by the registration endpoint.
     * @enum {string}
     */
    RegisterErrorCode:
      | 'EMAIL_ALREADY_USED'
      | 'USERNAME_ALREADY_USED'
      | 'USERNAME_VALIDATION_ERROR'
      | 'INVALID_EMAIL_FORMAT'
      | 'VALIDATION_ERROR';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    RegisterErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['RegisterErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    RegisterRequestDto: {
      username: string;
      /** Format: email */
      email: string;
      password: string;
      nickname: string;
    };
    /** @enum {string} */
    Theme: 'Dark' | 'Light';
    /** @enum {string} */
    TimeSystem: 'TwelveHour' | 'TwentyFourHour';
    UserConfigurationDto: {
      timeSystem: components['schemas']['TimeSystem'];
      distanceUnit: components['schemas']['DistanceUnit'];
      language: components['schemas']['Language'];
      theme: components['schemas']['Theme'];
    };
    /**
     * @description Defines error codes related to user configuration operations, returned in API error responses.
     * @enum {string}
     */
    UserConfigurationErrorCode: 'USER_CONFIGURATION_NOT_FOUND' | 'VALIDATION_ERROR';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    UserConfigurationErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['UserConfigurationErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    UserDto: {
      /** Format: int32 */
      id: number;
      nickname: string;
      email: string;
    };
    /**
     * @description Defines error codes related to user operations, returned in API error responses.
     * @enum {string}
     */
    UserErrorCode: 'USER_NOT_FOUND';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    UserErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['UserErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    UserLocationDto: {
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      /** Format: date-time */
      updatedAt: string;
    };
    /**
     * @description Defines error codes related to user location operations, returned in API error responses.
     * @enum {string}
     */
    UserLocationErrorCode: 'INVALID_COORDINATES';
    /** @description Represents a strongly-typed error response containing a machine-readable error code. */
    UserLocationErrorCodeErrorResponse: {
      /** @description Gets or sets the machine-readable error code. */
      code: components['schemas']['UserLocationErrorCode'];
      /** @description The human-readable error message. */
      message?: string | null;
    };
    UserLocationRequestDto: {
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
    };
    UserPathDto: {
      /** Format: uuid */
      userId: string;
      segments: components['schemas']['BaseSegmentDto'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
